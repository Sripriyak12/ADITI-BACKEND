// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for storing customer registration details
model Customer {
  id            Int         @id @default(autoincrement())
  fname         String
  lname         String
  gender        String
  age           Int
  mobile        String      @unique
  email         String      @unique
  pan           String      @unique
  accountNumber String      @unique
  password      String // We will hash this securely in the backend

  assessments   Assessment[] // A customer can have multiple assessments
  lastAccessed  DateTime?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Model for storing the results of a customer's quiz assessment
model Assessment {
  id              Int       @id @default(autoincrement())
  score           Int
  status          String    @default("Pending")
  language        String?   @default("en")
  answers         Json
  breakdown       Json

  customerId      Int
  customer        Customer  @relation(fields: [customerId], references: [id])

  documents       Document[]
  messages        Message[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Model for storing uploaded documents
model Document {
  id            Int      @id @default(autoincrement())
  fileName      String   // The random filename generated by multer
  originalName  String     @default("unnamed_file")
  filePath      String   // Storing the path where the file is saved
  docType       String?  // Stores the document purpose
  uploadDate    DateTime   @default(now())

  assessmentId  Int
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
}

// Model for storing messages between the customer and bank manager
model Message {
  id            Int      @id @default(autoincrement())
  sender        String
  text          String
  createdAt     DateTime @default(now())

  assessmentId  Int
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
}

// Model for the Bank User
model BankUser {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  password      String
}

// ‚≠ê NEW MODEL: Stores dynamic questions generated by AI
model DynamicQuestion {
  id        String    @id @default(uuid())
  question  String
  language  String    @default("en")
  options   Json      // Stores the options as a JSON array of objects
  createdAt DateTime  @default(now())
}